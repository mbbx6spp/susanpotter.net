<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Talks on Susan Potter</title><link>/talks/</link><description>Recent content in Talks on Susan Potter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="/talks/index.xml" rel="self" type="application/rss+xml"/><item><title>From Zero to Haskell: Lessons Learned (ZuriHac 2019 / Zurich, Switzerland)</title><link>/talks/from-zero-to-haskell-lessons-learned-zurihac-2019-/-zurich-switzerland/</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid>/talks/from-zero-to-haskell-lessons-learned-zurihac-2019-/-zurich-switzerland/</guid><description>Presented at ZuriHac 2019</description></item><item><title>Dynamically scaling a political news and activism hub (up to 5x the traffic in 20 minutes)</title><link>/talks/dynamically-scaling-a-political-news-and-activism-hub-up-to-5x-the-traffic-in-20-minutes/</link><pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate><guid>/talks/dynamically-scaling-a-political-news-and-activism-hub-up-to-5x-the-traffic-in-20-minutes/</guid><description>On any given day this news discussion site can receive traffic peaks up to five times our base traffic, sometimes requiring us to scale out to double our backend app server capacity within a 10-20 minutes window (sometimes at unpredictable times). In this talk, Susan Potter will discuss DailyKos&amp;#39;s use of autoscaling in EC2 from the essential components to some gotchas learned along the way.</description></item><item><title>Functional Operations (Functional Programming at Comcast Labs Connect)</title><link>/talks/functional-operations-functional-programming-at-comcast-labs-connect/</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid>/talks/functional-operations-functional-programming-at-comcast-labs-connect/</guid><description>If we were starting greenfield development of a service or web application today we would likely employ a number of practices and design choices that are known to optimise application responsiveness, resiliency, elasticity, and/or composability. Delivering our reactive applications on top of predictable infrastructure will set our project up for success.
Some of us don&amp;#39;t have that luxury. We must provision, deploy, and operationally maintain legacy monolithic Rails web applications and HTTP APIs that are hard to refactor without introducing new bugs, poorly performing, and struggle to meet user load/peak demand. Built during a prior era of the company where fast and loose practices were rewarded, startup cowboys delivered the first set of features promptly at the expense of subsequent velocity, long-term maintainability, and high risk deployments. When living in this reality, our infrastructure must be reliable or our application needs constant babysitting, leading to on-call fatigue and high staff turnover.
The good news is there are core principles we can apply to produce more reproducible systems, failstop deployments, and consistent environment configurations to eliminate a large class of bugs inherent in legacy applications and minimize related business risks. This will be the focus of the session and applies to both greenfield and legacy cases.
Code examples given using NixOS and Haskell, but focus remains on the underlying principles.</description></item><item><title>Functional and Reactive Operations</title><link>/talks/functional-and-reactive-operations/</link><pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate><guid>/talks/functional-and-reactive-operations/</guid><description>If we were starting greenfield development of a service or web application today we would likely employ a number of practices and design choices that are known to optimise application responsiveness, resiliency, elasticity, and/or composability. Delivering our reactive applications on top of predictable infrastructure will set our project up for success. Some of us don&amp;#39;t have that luxury. We must provision, deploy, and operationally maintain legacy monolithic Rails web applications and HTTP APIs that are hard to refactor without introducing new bugs, poorly performing, and struggle to meet user load/peak demand. Built during a prior era of the company where fast and loose practices were rewarded, startup cowboys delivered the first set of features promptly at the expense of subsequent velocity, long-term maintainability, and high risk deployments. When living in this reality, our infrastructure must be reliable or our application needs constant babysitting, leading to on-call fatigue and high staff turnover. The good news is there are core principles we can apply to produce more reproducible systems, failstop deployments, and consistent environment configurations to eliminate a large class of bugs inherent in legacy applications and minimize related business risks. This will be the focus of the session and applies to both greenfield and legacy cases. Code examples given using NixOS and Haskell, but focus remains on the underlying principles.</description></item><item><title>Put a Type On It: Idris Types as Propositions</title><link>/talks/put-a-type-on-it-idris-types-as-propositions/</link><pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate><guid>/talks/put-a-type-on-it-idris-types-as-propositions/</guid><description>Showing how Curry-Howard can be applied to structuring types to represent logical propositions.</description></item><item><title>From Zero To Production (NixOS, Erlang)</title><link>/talks/from-zero-to-production-nixos-erlang/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>/talks/from-zero-to-production-nixos-erlang/</guid><description>This talk will introduce the audience to the Nix packaging, NixOS, and related ecosystem tools for Erlang/Elixir developers. By reviewing common development, testing, and deployment problems we will look at what Nix has to offer to aid Erlang/Elixir developers in these areas. From seamless developer environment bootstrapping to consistent CI environments and beyond.</description></item><item><title>Functional Algebra: Monoids Applied</title><link>/talks/functional-algebra-monoids-applied/</link><pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate><guid>/talks/functional-algebra-monoids-applied/</guid><description>In functional programming, words from Category Theory are thrown around, but how useful are they really? This session looks at applications of monoids specifically and how using their algebraic properties offers a solid foundation of reasoning in many types of business domains and reduces developer error as computational context complexity increases. This will provide a tiny peak at Category Theory&amp;#39;s practical uses in software development and modeling. Code examples will be in Haskell and Scala, but monoids could be constructed in almost any language by software craftsmen and women utilizing higher orders of reasoning to their code.</description></item><item><title>Why Haskell?</title><link>/talks/why-haskell/</link><pubDate>Fri, 16 Mar 2012 00:00:00 +0000</pubDate><guid>/talks/why-haskell/</guid><description>Code PaLOUsa 2012 / March 16, 2012 - Louisville, KY
Abstract Monads, also known as Kleisli triples in Category Theory, are an (endo-)functor together with two natural transformations, which are surprisingly useful in pure languages like Haskell, but this talk will NOT reference monads. Ever. (Well, at least not in this talk.)
Instead what I intend to impress upon an audience of newcomers to Haskell is the wide array of freely available libraries most of which is liberally licensed open source software, intuitive package management, practical build tools, reasonable documentation (when you know how to read it and where to find it), interactive shell (or REPL), mature compiler, stable runtime, testing tools that will blow your mind away, and a small but collaborative and knowledgeable community of developers.</description></item><item><title>Dynamo: Not just for datastores</title><link>/talks/dynamo-not-just-for-datastores/</link><pubDate>Mon, 19 Sep 2011 00:00:00 +0000</pubDate><guid>/talks/dynamo-not-just-for-datastores/</guid><description>Find out how to build decentralized, fault-tolerant, stateful application services using core concepts and techniques from the Amazon Dynamo paper using riak_core as a toolkit.</description></item><item><title>Distributed Developer Workflows using Git</title><link>/talks/distributed-developer-workflows-using-git/</link><pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate><guid>/talks/distributed-developer-workflows-using-git/</guid><description>This meetup I will be walking the audience through how to setup, configure and maintain distributed development workflows using Git (the distributed VCS developers either love or hate). Much of the workflows suggested here will be applicable to other dVCSes like Mercurial, Darcs and Bazaar.</description></item><item><title>Deploying Distributed Software Services to the Cloud (without Breaking a Sweat)</title><link>/talks/deploying-distributed-software-services-to-the-cloud-without-breaking-a-sweat/</link><pubDate>Sat, 05 Mar 2011 00:00:00 +0000</pubDate><guid>/talks/deploying-distributed-software-services-to-the-cloud-without-breaking-a-sweat/</guid><description>The promise of cloud computing provides business benefits from reduced costs to increased flexibility. One struggle organizations face as they move to run on cloud infrastructure is automating complex dsitributed deployments.</description></item><item><title>Designing for Concurrency</title><link>/talks/designing-for-concurrency/</link><pubDate>Sun, 22 Aug 2010 00:00:00 +0000</pubDate><guid>/talks/designing-for-concurrency/</guid><description>Presenting traditional and less traditional approaches to designing concurrent systems.</description></item></channel></rss>