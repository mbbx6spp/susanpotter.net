<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>purescript on Susan Potter</title>
    <link>/tags/purescript/</link>
    <description>Recent content in purescript on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/purescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Motivation for Reader (PureScript edition)</title>
      <link>/snippets/motivation-for-reader-purescript-edition/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/motivation-for-reader-purescript-edition/</guid>
      <description>Assume we have to connect to a REST API that requires credentials. To call the REST API we would need to pass the credentials for the REST API to each call wrapper. Something like that following:</description>
    </item>
    
    <item>
      <title>No subtyping in PureScript</title>
      <link>/snippets/no-subtyping-in-purescript/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/no-subtyping-in-purescript/</guid>
      <description>This is an excerpt from a code review that I sanitized for public consumption. Changes include modifying code examples to not refer to internal types or domains:
  PureScript (like Haskell) has zero notion of subtyping. Subtyping is often paired with inheritance in OO languages to derive moderate amounts of reuse from class-based hierarchies. Today, the OO community appears to prefer OO &amp;#34;composition&amp;#34; over inheritance (https://en.wikipedia.org/wiki/Composition_over_inheritance).
 Typically OO composition yields simpler and more practical solutions to problems beyond the toy examples found in OO textbooks back in the day.</description>
    </item>
    
    <item>
      <title>Building a serverless application for subscription webhooks, Part 1</title>
      <link>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</guid>
      <description>Note: After starting to write this blog post series, AWS announced that API Gateway HTTP APIs could now route requests directly to five new services including Amazon Kinesis Data Streams. As a result I adapted the content of this series to account for that, however, it is possible some remnants of prior versions exist in the text.
 If you notice any such sentences or fragments, please let me know on Twitter (my DMs are open or tweet me publicly).</description>
    </item>
    
    <item>
      <title>A quick review of a pure functional serverless application deployed to production
</title>
      <link>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</guid>
      <description>/images/car-dashboard-small.webp
Photo by Dawid Zawi≈Ça on Unsplash  This was adapted from a tweet thread on June 3rd, 2020.
 Notes:
  all references to $ (dollars) is in reference to US Dollars (USD)
  latencies are quoted in milliseconds (ms) unless otherwise noted
  this serverless application was deployed using the AWS primitives API Gateway (REST) and AWS Lambda
    Last week I deployed my second &amp;#34;serverless app&amp;#34; to production.</description>
    </item>
    
  </channel>
</rss>