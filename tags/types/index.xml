<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>types on Susan Potter</title>
    <link>/tags/types/</link>
    <description>Recent content in types on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TypeScript&#39;s =keyof= operator and possible uses</title>
      <link>/software/typescripts-keyof-operator-and-possible-uses/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/typescripts-keyof-operator-and-possible-uses/</guid>
      <description>In the last two weeks I learned about the keyof operator in TypeScript as I searched for a better solution to a problem we had in on of our internal client-side libraries at work.
 Much of our TypeScript codebases at work use lodash although I am trying to encourage those developers to incorporate more ideas from fp-ts which provides ways of using common functional abstractions commonly found in Haskell and PureScript in TypeScript itself despite its lack of typeclass support.</description>
    </item>
    
    <item>
      <title>To Type or not to Static Type</title>
      <link>/software/to-type-or-not-to-static-type/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/software/to-type-or-not-to-static-type/</guid>
      <description>Originally published as a Gist here: https://gist.github.com/mbbx6spp/60577af8dc4106d6e710cd804292ce20
 Minor modifications in formatting and an extra line of no-judgement was added to this text from the original Gist.
Purpose, Disclaimer and Confessions   This is the (mostly) no nonesense guide to studies and research that measures and/or compares a variety of facets, characteristics, or manifestations of software development in dynamically vs statically typed programming languages.
 Disclaimer: For larger, more complex codebases, I do advocate for statically typed languages that also support algebraic data types, generic types, type classes, and preferrably a form of typelevel expressiveness (e.</description>
    </item>
    
  </channel>
</rss>