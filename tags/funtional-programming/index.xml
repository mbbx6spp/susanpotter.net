<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>funtional programming on Susan Potter</title>
    <link>/tags/funtional-programming/</link>
    <description>Recent content in funtional programming on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/funtional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Profunctors: An API, Part 3</title>
      <link>/software/profunctors-an-api-part-3/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/profunctors-an-api-part-3/</guid>
      <description> /images/reflection-small.webp
Photo by Jonatan Pie on Unsplash </description>
    </item>
    
    <item>
      <title>Profunctors for the web developer: First intuitions, Part 2</title>
      <link>/software/profunctors-for-the-web-developer-first-intuitions-part-2/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/profunctors-for-the-web-developer-first-intuitions-part-2/</guid>
      <description>/images/leaf-half-dead-small.webp
Photo by Mario Dobelmann on Unsplash  All of the paired transforms from Part 1 can be modeled with the interface that Profunctor provides but what does that mean and why is that useful?
 In Part 2 we will explore our first intuitions about these pairings:
  how they are similar to each other
  how they are different from each other
  how having a common interface for them improves the web developer&amp;#39;s day at work</description>
    </item>
    
    <item>
      <title>Profunctors for the web developer: Motivating examples, Part 1</title>
      <link>/software/profunctors-for-the-web-developer-motivating-examples-part-1/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/profunctors-for-the-web-developer-motivating-examples-part-1/</guid>
      <description>Offering examples of profunctors that web developers might find motivating.</description>
    </item>
    
    <item>
      <title>Parametricity: A Practitioners Guide</title>
      <link>/software/parametricity-a-practitioners-guide/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/software/parametricity-a-practitioners-guide/</guid>
      <description>Introduction   What software developer likes surprises, especially in production? Not me. At least not when I am on call. ;)
 Wouldn&amp;#39;t it be great if we were able to reason about our code to make our lives as simple as possible when debugging or eliminate debugging altogether?
 The big idea of parametricity is that from parametric (or generic) &amp;#34;pure&amp;#34; functions we can determine interesting properties (and more of them) from the parametric (generic) types than the equivalent function fixed with specific types.</description>
    </item>
    
  </channel>
</rss>