<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>v8 on Susan Potter</title>
    <link>/tags/v8/</link>
    <description>Recent content in v8 on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/v8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript Performance: Node CLI flags</title>
      <link>/snippets/javascript-performance-node-cli-flags/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/javascript-performance-node-cli-flags/</guid>
      <description>These are some notes on performance engineering related to generating insights into Node.js (v8) performance.
 All material here is specific to the v8 engine found in Node.js, Chrome, and Opera.
 Generally useful things to learn to tune JavaScript (for the v8 engine) is natives syntax. You can run JS with natives syntax directives sprinkled throughout using the Node.js command-line:
  --allow-natives-syntax
  Read more on available natives syntax directives available from the source.</description>
    </item>
    
  </channel>
</rss>