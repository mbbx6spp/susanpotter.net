<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Susan Potter</title>
    <link>https://susanpotter.net/software/</link>
    <description>Recent content in Software on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2019 17:11:08 -0500</lastBuildDate>
    
	<atom:link href="https://susanpotter.net/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Practical Recursion Schemes</title>
      <link>https://susanpotter.net/blogs/software/2018/10/practical-recursion-schemes/</link>
      <pubDate>Mon, 22 Oct 2018 18:45:40 -0500</pubDate>
      
      <guid>https://susanpotter.net/blogs/software/2018/10/practical-recursion-schemes/</guid>
      <description>Recursive data types Recursive data structures pop up all over in software from general-purpose structures like lists and binary trees to more application-specific structures like this AST from a simple business rules engine:
data BusinessRule input output = IfThenElse (input -&amp;gt; Bool) (BusinessRule input output) (BusinessRule input output) | Return (input -&amp;gt; output) | Stop  Functor Foldable The Foldable class gives you the ability to process the elements of a structure one-at-a-time, discarding the shape.</description>
    </item>
    
    <item>
      <title>Decoding lens operators</title>
      <link>https://susanpotter.net/blogs/software/2018/04/haskell-decoding-lenses/</link>
      <pubDate>Sat, 21 Apr 2018 14:15:59 -0500</pubDate>
      
      <guid>https://susanpotter.net/blogs/software/2018/04/haskell-decoding-lenses/</guid>
      <description>Notation conventions The following table provides a quick overview of conventions used in symbolic operators in the lens library.
   Symbol Concept Denotes     ^ getter gets value from structure   ~ setter sets values in structure   % over apply transformation over selected substructure   = state threads state through   &amp;lt;&amp;lt; before change returns value before specified change   &amp;lt; after change returns value after specified change   ?</description>
    </item>
    
    <item>
      <title>Scala WTFs</title>
      <link>https://susanpotter.net/blogs/software/2014/02/scala-wtfs/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://susanpotter.net/blogs/software/2014/02/scala-wtfs/</guid>
      <description>Small sample of reasons why the Scala standard library (especially collections) might need rewriting (many taken from Paul Phillips talks on the Scala Collections library):
scala&amp;gt; List(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;).toSet // the only reasonable line of code in here res1: scala.collection.immutable.Set[String] = Set(a, b, c) scala&amp;gt; List(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;).toSet() // seen this when learning Scala first time. ROFL. res2: Boolean = false scala&amp;gt; List(1, 2) ::: List(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) // it&#39;d be funny if you didn&#39;t care.</description>
    </item>
    
    <item>
      <title>OSX Lion (10.7.4) work laptop setup</title>
      <link>https://susanpotter.net/blogs/software/2014/01/osx-lion-setup/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://susanpotter.net/blogs/software/2014/01/osx-lion-setup/</guid>
      <description>Homebrew Install after the command-line tools for Xcode.
 tmux erlang haskell-platform zsh git figlet scala sbt rbenv ruby-build s3cmd pit  brew install tmux erlang haskell-platform zsh \ git figlet scala sbt rbenv ruby-build s3cmd pit  RubyGems  veewee  App Store  Opera Skitch XCode (Command-line tools) Miro (if only there was a way to uninstall iTunes)  Manual Installs  Skype Chrome Firefox Adium Command-line tools from Xcode (after install) GitHub for Mac Java 7 (and change default to this in Java Preferences) DropBox Growl (latest free version) VirtualBox Vagrant - see http://vagrantup.</description>
    </item>
    
  </channel>
</rss>