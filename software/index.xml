<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Susan Potter</title>
    <link>/software/</link>
    <description>Recent content in Software on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2019 17:11:08 -0500</lastBuildDate>
    
	<atom:link href="/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Random notes on Unikernels</title>
      <link>/blogs/software/2019/12/unikernels/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/software/2019/12/unikernels/</guid>
      <description>This is an adaptation of a Slack chat explanation from work (slightly reworded to read better for the audience) from work in 2017. Random notes on unikernels  Introducing unikernels   You might have heard terms like unikernel, nanokernel, or library operating systems. These aren&amp;#39;t always used in exactly the same way, but they are highly related terms.  MirageOS is the research project that has received the most industry love of which I am aware.</description>
    </item>
    
    <item>
      <title>DynamoDB: Basics</title>
      <link>/blogs/software/2019/10/dynamodb-basics/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/blogs/software/2019/10/dynamodb-basics/</guid>
      <description>Introduction   This post introduces concepts and principles used to design DynamoDB tables as I have been learning how to leverage this technology in a new project.  This introduction will compare and contrast the core concepts and ideas with those found in relational database management systems (RDBMS). Key takeaways   While using DynamoDB the last couple of months, one of the big takeaways is that data modeling is a vital part and that the modeling process itself looks structurally similar to relational database design.</description>
    </item>
    
    <item>
      <title>Principles of economics applied to software development, reliability engineering, and technical leadership</title>
      <link>/blogs/software/2017/06/economic-theory/</link>
      <pubDate>Thu, 22 Jun 2017 15:42:40 -0500</pubDate>
      
      <guid>/blogs/software/2017/06/economic-theory/</guid>
      <description>One of my favorite subjects as a layperson is economics. I have found many useful applications of methods and concepts to my work in software development, technical leadership, and reliability engineering roles.  This is a post to share some of these. A few ideas from economics: an overview   Below is an overview of ideas from economics that have resonated with me at work:   Opportunity cost    Looking at what you lose by choosing a specific activity over others.</description>
    </item>
    
    <item>
      <title>Parametricity: A Practitioners Guide</title>
      <link>/blogs/software/2014/09/parametricity-practitioners-guide/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blogs/software/2014/09/parametricity-practitioners-guide/</guid>
      <description>Introduction   What software developer likes surprises, especially in production? Not me. At least not when I am on call. ;)  Wouldn&amp;#39;t it be great if we were able to reason about our code to make our lives as simple as possible when debugging or eliminate debugging altogether?  The big idea of parametricity is that from parametric (or generic) &amp;#34;pure&amp;#34; functions we can determine interesting properties (and more of them) from the parametric (generic) types than the equivalent function fixed with specific types.</description>
    </item>
    
    <item>
      <title>SCM: The Next Generation</title>
      <link>/blogs/software/2007/01/scm-next-generation/</link>
      <pubDate>Thu, 25 Jan 2007 21:58:00 -0600</pubDate>
      
      <guid>/blogs/software/2007/01/scm-next-generation/</guid>
      <description>I am sure most developers (whether Java, Ruby, Python, or other) have used Subversion, Perforce or CVS to manage and control their projects&amp;#39; source, but have you used darcs or git?  I&amp;#39;m sure most of you would have heard of git it hosts the Linux kernel code currently. Less of you have probably heard of darcs before. Prior to this evening, the most notable point of darcs to me, is that it is written in Haskell.</description>
    </item>
    
  </channel>
</rss>