<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Susan Potter</title>
    <link>/software/</link>
    <description>Recent content in Software on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2019 17:11:08 -0500</lastBuildDate>
    
	<atom:link href="/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TypeScript enum versus const enum</title>
      <link>/software/typescript-enum-versus-const-enum/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/typescript-enum-versus-const-enum/</guid>
      <description>Today I found that there is a difference between enum and const enum in TypeScript in the generated JavaScript. Namely:
  with a non-const enum the compiler generates an object with key-value pairs.
  with a const enum the definition alone doesn&amp;#39;t generate any code, only usage of the enum does.
  Note: all generated JavaScript code is generated from the TypeScript v4.1 compiler.
non-const enum definition   Let&amp;#39;s say we wanted to rate desserts, we might have a rating scale defined as an enumeration.</description>
    </item>
    
    <item>
      <title>Profunctors: Motivation, Part 1</title>
      <link>/software/profunctors-motivation-part-1/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/profunctors-motivation-part-1/</guid>
      <description>Photo by Alex on Unsplash  Notes:
  This post was originally adapted from a gist in 2018: https://gist.github.com/mbbx6spp/51bf2b694dc9bbf81b60f2f616453eb3
  The Gist was moved to a snippet.
Goals     This series explores one kind of motivation and the building blocks of Profunctors with an aim to introduce the concepts informally while introducing terminology along the way. After assembling the parts of a Profunctor the reader should start to see how packaging these operators as a pair allows library designers to offer a declarative interface for their clients to build custom codecs with a small number of primitives.</description>
    </item>
    
    <item>
      <title>Feature Flags in PureScript</title>
      <link>/software/feature-flags-in-purescript/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/feature-flags-in-purescript/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unfiltered musings on &#34;enterprise versus startup&#34; (the wrong question)</title>
      <link>/software/unfiltered-musings-on-enterprise-versus-startup-the-wrong-question/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/unfiltered-musings-on-enterprise-versus-startup-the-wrong-question/</guid>
      <description>Since the mid-1990s I have worked in software development at a number of organizations that ranged from the very big and changing slowly to the very small and growing fast.
 I was asked recently to give advise on the kind of organization a former colleague should target with their next career move.
 My answer was unenthusiastically received until I elaborated.
 The following is an excerpt from our conversation with some details edited to protect the innocent.</description>
    </item>
    
    <item>
      <title>Building a serverless application for subscription webhooks, Part 1</title>
      <link>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</guid>
      <description>Note: After starting to write this blog post series, AWS announced that API Gateway HTTP APIs could now route requests directly to five new services including Amazon Kinesis Data Streams. As a result I adapted the content of this series to account for that, however, it is possible some remnants of prior versions exist in the text.
 If you notice any such sentences or fragments, please let me know on Twitter (my DMs are open or tweet me publicly).</description>
    </item>
    
    <item>
      <title>Musings on serverless</title>
      <link>/software/musings-on-serverless/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/musings-on-serverless/</guid>
      <description>Over the last twenty years I have worked close to or on the frontlines of system infrastructure delivery from hall server closets to multi-datacenter setups (before what we know as cloud computing was a thing) all the way to a variety of programmable cloud configurations across multiple regions and even providers and deploying multi-region serverless applications in minutes.
 Since the mid-1990s availability has become the coveted prize as internet and business systems cater to users and business needs 24/7 across the globe.</description>
    </item>
    
    <item>
      <title>Algebraic Data Types in TypeScript</title>
      <link>/software/algebraic-data-types-in-typescript/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types-in-typescript/</guid>
      <description>Note: the code for the TypeScript (to help you follow along) is available here: Encoding Algebraic Data Types in TypeScript code
Background  Recently I&amp;#39;ve been reviewing TypeScript code at work. A common pattern I&amp;#39;ve observed in pull requests and some open source projects is a type that looks like the following:
type FooTag = &amp;#39;Bar&amp;#39; | &amp;#39;Baz&amp;#39; | &amp;#39;Qux&amp;#39;; type Foo&amp;lt;A&amp;gt; = { _tag : FooTag, /* Required for the &amp;#39;Bar&amp;#39; tagged values of Foo */ bar?</description>
    </item>
    
    <item>
      <title>Algebraic Data Types: For the math(s) inclined</title>
      <link>/software/algebraic-data-types-for-the-maths-inclined/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types-for-the-maths-inclined/</guid>
      <description>This was initially published as a section of one of my substack posts.
  You might be wondering why the term algebraic data types has the word algebra in it. Don’t sweat it if you hated algebra in high school, I will not call on you to solve simultaneous equations or prove by induction on the board in front of the class.
 The basic idea is that through a little algebra we can determine the cardinality of an algebraic data type which represents how many possible values that could inhabit it.</description>
    </item>
    
    <item>
      <title>Adding and removing friction to developer process and interaction by design</title>
      <link>/software/adding-and-removing-friction-to-developer-process-and-interaction-by-design/</link>
      <pubDate>Fri, 17 Jul 2020 19:12:46 -0500</pubDate>
      
      <guid>/software/adding-and-removing-friction-to-developer-process-and-interaction-by-design/</guid>
      <description>In 2015 I was binge-reading books on how to break bad habits and create good habits. Since then I have been applying the psychology research I learned from those books to my personal habits and also work habits.
 When trying to form habits there are four levers that psychology researchers found made forming habits easier:
  easy
  obvious
  This post will describe just two examples from work the last few years that I designed into my teams delivery processes to encourage developers to deliver work assigned to them as soon as possible without them fearing management was constantly monitoring individual metrics and thresholds as they .</description>
    </item>
    
    <item>
      <title>A quick review of a pure functional serverless application deployed to production
</title>
      <link>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</guid>
      <description>Photo by Dawid Zawiła on Unsplash  This was adapted from a tweet thread on June 3rd, 2020.
 Notes:
  all references to $ (dollars) is in reference to US Dollars (USD)
  latencies are quoted in milliseconds (ms) unless otherwise noted
  this serverless application was deployed using the AWS primitives API Gateway (REST) and AWS Lambda
    Last week I deployed my second &amp;#34;serverless app&amp;#34; to production.</description>
    </item>
    
    <item>
      <title>Random notes on Unikernels</title>
      <link>/software/random-notes-on-unikernels/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/software/random-notes-on-unikernels/</guid>
      <description>This is an adaptation of a Slack chat explanation from work (slightly reworded to read better for the audience) from work in 2017.
Random notes on unikernels  Introducing unikernels   You might have heard terms like unikernel, nanokernel, or library operating systems. These aren&amp;#39;t always used in exactly the same way, but they are highly related terms.
 MirageOS is the research project that has received the most industry love of which I am aware.</description>
    </item>
    
    <item>
      <title>DynamoDB: The Basics</title>
      <link>/software/dynamodb-the-basics/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/software/dynamodb-the-basics/</guid>
      <description>Introduction   This post introduces concepts and principles used to design DynamoDB tables as I have been learning how to leverage this technology in a new project.
 This introduction will compare and contrast the core concepts and ideas with those found in relational database management systems (RDBMS).
  Key takeaways   While using DynamoDB the last couple of months, one of the big takeaways is that data modeling is a vital part and that the modeling process itself looks structurally similar to relational database design.</description>
    </item>
    
    <item>
      <title>Practical Recursion Schemes</title>
      <link>/software/practical-recursion-schemes/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/software/practical-recursion-schemes/</guid>
      <description>Recursive data types   Recursive data structures pop up all over in software from general-purpose structures like lists and binary trees to more application-specific structures like this AST from a simple business rules engine:
data BusinessRule input output = IfThenElse (input -&amp;gt; Bool) (BusinessRule input output) (BusinessRule input output) | Return (input -&amp;gt; output) | Stop    Functor   Foldable   The Foldable class gives you the ability to process the elements of a structure one-at-a-time, discarding the shape.</description>
    </item>
    
    <item>
      <title>Economic concepts applied in software development, reliability engineering, and technical leadership</title>
      <link>/software/economic-concepts-applied-in-software-development-reliability-engineering-and-technical-leadership/</link>
      <pubDate>Thu, 22 Jun 2017 15:42:40 -0500</pubDate>
      
      <guid>/software/economic-concepts-applied-in-software-development-reliability-engineering-and-technical-leadership/</guid>
      <description>One of my favorite subjects as a layperson is economics. I have found many useful applications of methods and concepts to my work in software development, technical leadership, and reliability engineering roles.
 This is a post to share some of these.
A few ideas from economics: an overview   Below is an overview of ideas from economics that have resonated with me at work:
  Opportunity cost   Looking at what you lose by choosing a specific activity over others.</description>
    </item>
    
    <item>
      <title>To Type or not to Static Type</title>
      <link>/software/to-type-or-not-to-static-type/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/software/to-type-or-not-to-static-type/</guid>
      <description>Originally published as a Gist here: https://gist.github.com/mbbx6spp/60577af8dc4106d6e710cd804292ce20
 Minor modifications in formatting and an extra line of no-judgement was added to this text from the original Gist.
Purpose, Disclaimer and Confessions   This is the (mostly) no nonesense guide to studies and research that measures and/or compares a variety of facets, characteristics, or manifestations of software development in dynamically vs statically typed programming languages.
 Disclaimer: For larger, more complex codebases, I do advocate for statically typed languages that also support algebraic data types, generic types, type classes, and preferrably a form of typelevel expressiveness (e.</description>
    </item>
    
    <item>
      <title>Parametricity: A Practitioners Guide</title>
      <link>/software/parametricity-a-practitioners-guide/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/software/parametricity-a-practitioners-guide/</guid>
      <description>Introduction   What software developer likes surprises, especially in production? Not me. At least not when I am on call. ;)
 Wouldn&amp;#39;t it be great if we were able to reason about our code to make our lives as simple as possible when debugging or eliminate debugging altogether?
 The big idea of parametricity is that from parametric (or generic) &amp;#34;pure&amp;#34; functions we can determine interesting properties (and more of them) from the parametric (generic) types than the equivalent function fixed with specific types.</description>
    </item>
    
    <item>
      <title>Algebraic Data Types</title>
      <link>/software/algebraic-data-types/</link>
      <pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types/</guid>
      <description>An algebraic data type can take many forms:
  Sum type
  Product type
  Hybrid Sum/Product type
  Recursive type (not covered in this post)
Sum Types (aka Tagged Unions)     A sum type is a type that has a known and exhaustive list of constructors where a value of that type must be constructed by exactly one of the constructors.</description>
    </item>
    
    <item>
      <title>SCM: The Next Generation</title>
      <link>/software/scm-the-next-generation/</link>
      <pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/software/scm-the-next-generation/</guid>
      <description>I am sure most developers (whether Java, Ruby, Python, or other) have used Subversion, Perforce or CVS to manage and control their projects&amp;#39; source, but have you used darcs or git?
 I&amp;#39;m sure most of you would have heard of git it hosts the Linux kernel code currently. Less of you have probably heard of darcs before. Prior to this evening, the most notable point of darcs to me, is that it is written in Haskell.</description>
    </item>
    
  </channel>
</rss>