<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Susan Potter</title>
    <link>/</link>
    <description>Recent content on Susan Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TypeScript enum versus const enum</title>
      <link>/software/typescript-enum-versus-const-enum/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/typescript-enum-versus-const-enum/</guid>
      <description>Today I found that there is a difference between enum and const enum in TypeScript in the generated JavaScript. Namely:
  with a non-const enum the compiler generates an object with key-value pairs.
  with a const enum the definition alone doesn&amp;#39;t generate any code, only usage of the enum does.
  Note: all generated JavaScript code is generated from the TypeScript v4.1 compiler.
non-const enum definition   Let&amp;#39;s say we wanted to rate desserts, we might have a rating scale defined as an enumeration.</description>
    </item>
    
    <item>
      <title>Using three-way diffing context for merge conflict style in Git</title>
      <link>/software/using-three-way-diffing-context-for-merge-conflict-style-in-git/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/using-three-way-diffing-context-for-merge-conflict-style-in-git/</guid>
      <description>It recently came to my attention that not everyone overrides the default merge.conflictStyle git-config setting. So in case anyone here wanted to try something new out that would provide more context during a rebase here you go.
 I use diff3 which you can set like this to override the default:
git config --global merge.conflictStyle diff3   When rebasing you will get the following markers:
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD THIS IS SOME CODE ||||||| merged common ancestors This is some code ======= This is some other code &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; d5439077.</description>
    </item>
    
    <item>
      <title>Profunctors: Motivation, Part 1</title>
      <link>/software/profunctors-motivation-part-1/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/profunctors-motivation-part-1/</guid>
      <description>Photo by Alex on Unsplash  Notes:
  This post was originally adapted from a gist in 2018: https://gist.github.com/mbbx6spp/51bf2b694dc9bbf81b60f2f616453eb3
  The Gist was moved to a snippet.
Goals     This series explores one kind of motivation and the building blocks of Profunctors with an aim to introduce the concepts informally while introducing terminology along the way. After assembling the parts of a Profunctor the reader should start to see how packaging these operators as a pair allows library designers to offer a declarative interface for their clients to build custom codecs with a small number of primitives.</description>
    </item>
    
    <item>
      <title>Feature Flags in PureScript</title>
      <link>/software/feature-flags-in-purescript/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/feature-flags-in-purescript/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Motivation for Reader (PureScript)</title>
      <link>/snippets/motivation-for-reader-purescript/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/motivation-for-reader-purescript/</guid>
      <description> Assume we have to connect to a REST API that requires credentials. To call the REST API we would need to pass the credentials for the REST API to each call wrapper. Something like that following:
getPortfolios :: Credentials -&amp;gt; Aff (Either Error (Array Portfolio)) getPortfolios (MkCredentials user pass) = do  </description>
    </item>
    
    <item>
      <title>No subtyping in PureScript</title>
      <link>/snippets/no-subtyping-in-purescript/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/no-subtyping-in-purescript/</guid>
      <description>This is an excerpt from a code review that I sanitized for public consumption. Changes include modifying code examples to not refer to internal types or domains:
  PureScript (like Haskell) has zero notion of subtyping. Subtyping is often paired with inheritance in OO languages to derive moderate amounts of reuse from class-based hierarchies. Today, the OO community appears to prefer OO &amp;#34;composition&amp;#34; over inheritance (https://en.wikipedia.org/wiki/Composition_over_inheritance).
 Typically OO composition yields simpler and more practical solutions to problems beyond the toy examples found in OO textbooks back in the day.</description>
    </item>
    
    <item>
      <title>Unfiltered musings on &#34;enterprise versus startup&#34; (the wrong question)</title>
      <link>/software/unfiltered-musings-on-enterprise-versus-startup-the-wrong-question/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/unfiltered-musings-on-enterprise-versus-startup-the-wrong-question/</guid>
      <description>Since the mid-1990s I have worked in software development at a number of organizations that ranged from the very big and changing slowly to the very small and growing fast.
 I was asked recently to give advise on the kind of organization a former colleague should target with their next career move.
 My answer was unenthusiastically received until I elaborated.
 The following is an excerpt from our conversation with some details edited to protect the innocent.</description>
    </item>
    
    <item>
      <title>Building a serverless application for subscription webhooks, Part 1</title>
      <link>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/building-a-serverless-application-for-subscription-webhooks-part-1/</guid>
      <description>Note: After starting to write this blog post series, AWS announced that API Gateway HTTP APIs could now route requests directly to five new services including Amazon Kinesis Data Streams. As a result I adapted the content of this series to account for that, however, it is possible some remnants of prior versions exist in the text.
 If you notice any such sentences or fragments, please let me know on Twitter (my DMs are open or tweet me publicly).</description>
    </item>
    
    <item>
      <title>Musings on serverless</title>
      <link>/software/musings-on-serverless/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/musings-on-serverless/</guid>
      <description>Over the last twenty years I have worked close to or on the frontlines of system infrastructure delivery from hall server closets to multi-datacenter setups (before what we know as cloud computing was a thing) all the way to a variety of programmable cloud configurations across multiple regions and even providers and deploying multi-region serverless applications in minutes.
 Since the mid-1990s availability has become the coveted prize as internet and business systems cater to users and business needs 24/7 across the globe.</description>
    </item>
    
    <item>
      <title>Algebraic Data Types in TypeScript</title>
      <link>/software/algebraic-data-types-in-typescript/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types-in-typescript/</guid>
      <description>Note: the code for the TypeScript (to help you follow along) is available here: Encoding Algebraic Data Types in TypeScript code
Background  Recently I&amp;#39;ve been reviewing TypeScript code at work. A common pattern I&amp;#39;ve observed in pull requests and some open source projects is a type that looks like the following:
type FooTag = &amp;#39;Bar&amp;#39; | &amp;#39;Baz&amp;#39; | &amp;#39;Qux&amp;#39;; type Foo&amp;lt;A&amp;gt; = { _tag : FooTag, /* Required for the &amp;#39;Bar&amp;#39; tagged values of Foo */ bar?</description>
    </item>
    
    <item>
      <title>Algebraic Data Types: For the math(s) inclined</title>
      <link>/software/algebraic-data-types-for-the-maths-inclined/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types-for-the-maths-inclined/</guid>
      <description>This was initially published as a section of one of my substack posts.
  You might be wondering why the term algebraic data types has the word algebra in it. Donâ€™t sweat it if you hated algebra in high school, I will not call on you to solve simultaneous equations or prove by induction on the board in front of the class.
 The basic idea is that through a little algebra we can determine the cardinality of an algebraic data type which represents how many possible values that could inhabit it.</description>
    </item>
    
    <item>
      <title>JavaScript Performance: Node CLI flags</title>
      <link>/snippets/javascript-performance-node-cli-flags/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/snippets/javascript-performance-node-cli-flags/</guid>
      <description>These are some notes on performance engineering related to generating insights into Node.js (v8) performance.
 All material here is specific to the v8 engine found in Node.js, Chrome, and Opera.
 Generally useful things to learn to tune JavaScript (for the v8 engine) is natives syntax. You can run JS with natives syntax directives sprinkled throughout using the Node.js command-line:
  --allow-natives-syntax
  Read more on available natives syntax directives available from the source.</description>
    </item>
    
    <item>
      <title>Adding and removing friction to developer process and interaction by design</title>
      <link>/software/adding-and-removing-friction-to-developer-process-and-interaction-by-design/</link>
      <pubDate>Fri, 17 Jul 2020 19:12:46 -0500</pubDate>
      
      <guid>/software/adding-and-removing-friction-to-developer-process-and-interaction-by-design/</guid>
      <description>In 2015 I was binge-reading books on how to break bad habits and create good habits. Since then I have been applying the psychology research I learned from those books to my personal habits and also work habits.
 When trying to form habits there are four levers that psychology researchers found made forming habits easier:
  easy
  obvious
  This post will describe just two examples from work the last few years that I designed into my teams delivery processes to encourage developers to deliver work assigned to them as soon as possible without them fearing management was constantly monitoring individual metrics and thresholds as they .</description>
    </item>
    
    <item>
      <title>A quick review of a pure functional serverless application deployed to production
</title>
      <link>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/software/a-quick-review-of-a-pure-functional-serverless-application-deployed-to-production/</guid>
      <description>Photo by Dawid ZawiÅ‚a on Unsplash  This was adapted from a tweet thread on June 3rd, 2020.
 Notes:
  all references to $ (dollars) is in reference to US Dollars (USD)
  latencies are quoted in milliseconds (ms) unless otherwise noted
  this serverless application was deployed using the AWS primitives API Gateway (REST) and AWS Lambda
    Last week I deployed my second &amp;#34;serverless app&amp;#34; to production.</description>
    </item>
    
    <item>
      <title>Random notes on Unikernels</title>
      <link>/software/random-notes-on-unikernels/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/software/random-notes-on-unikernels/</guid>
      <description>This is an adaptation of a Slack chat explanation from work (slightly reworded to read better for the audience) from work in 2017.
Random notes on unikernels  Introducing unikernels   You might have heard terms like unikernel, nanokernel, or library operating systems. These aren&amp;#39;t always used in exactly the same way, but they are highly related terms.
 MirageOS is the research project that has received the most industry love of which I am aware.</description>
    </item>
    
    <item>
      <title>DynamoDB: The Basics</title>
      <link>/software/dynamodb-the-basics/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/software/dynamodb-the-basics/</guid>
      <description>Introduction   This post introduces concepts and principles used to design DynamoDB tables as I have been learning how to leverage this technology in a new project.
 This introduction will compare and contrast the core concepts and ideas with those found in relational database management systems (RDBMS).
  Key takeaways   While using DynamoDB the last couple of months, one of the big takeaways is that data modeling is a vital part and that the modeling process itself looks structurally similar to relational database design.</description>
    </item>
    
    <item>
      <title>From Zero to Haskell: Lessons Learned (ZuriHac 2019 / Zurich, Switzerland)</title>
      <link>/talks/from-zero-to-haskell-lessons-learned-zurihac-2019-/-zurich-switzerland/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/talks/from-zero-to-haskell-lessons-learned-zurihac-2019-/-zurich-switzerland/</guid>
      <description>  ZuriHac 2019 / June 2019 - Zurich, Switzerland
Keywords    Haskell
  Training
  Mentoring
  Functional Programming
    Abstract   TODO
  Slides     </description>
    </item>
    
    <item>
      <title>Shorts</title>
      <link>/film/2019/05/shorts/</link>
      <pubDate>Sat, 11 May 2019 22:41:25 -0500</pubDate>
      
      <guid>/film/2019/05/shorts/</guid>
      <description>My absolute favorite format of film is the short film. Here are a list of short films I loved watching:
  Re-Gifted (2018): CGI 3D short film that follows the life of a decrative ornament.
  3x3 (2009): A tale of two different approaches to mastery.
  The Bigger Picture (2015): Two brothers struggling to cope with their elderly mother&amp;#39;s care.
  Round About Five (2005): A bicycle courier and a businessman share a fleeeting moment during a London rush hour.</description>
    </item>
    
    <item>
      <title>Dynamically scaling a political news and activism hub (up to 5x the traffic in 20 minutes)</title>
      <link>/talks/dynamically-scaling-a-political-news-and-activism-hub-up-to-5x-the-traffic-in-20-minutes/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/talks/dynamically-scaling-a-political-news-and-activism-hub-up-to-5x-the-traffic-in-20-minutes/</guid>
      <description>C-U Cloud Meetup / April 26, 2019 - Champaign, IL
Keywords    AWS
  Auto Scaling
  EC2
  Infrastructure
    Abstract   On any given day we can receive traffic peaks up to five times our base traffic, sometimes requiring us to scale out to double our backend app server capacity within a 10-20 minutes window (sometimes at unpredictable times).</description>
    </item>
    
    <item>
      <title>Profunctor exploration in less than 100 lines of Haskell</title>
      <link>/snippets/profunctor-exploration-in-less-than-100-lines-of-haskell/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/snippets/profunctor-exploration-in-less-than-100-lines-of-haskell/</guid>
      <description>{-# LANGUAGE ExplicitForAll #-} {-# LANGUAGE KindSignatures #-} {-# LANGUAGE NoImplicitPrelude #-} {-# LANGUAGE RankNTypes #-} {-# LANGUAGE TypeOperators #-} {-# LANGUAGE TypeSynonymInstances #-} {-# LANGUAGE MultiParamTypeClasses #-} module Profunctors where import Data.Either import Data.Maybe import Data.Functor import Data.Function ((.), ($)) class Iso a b where to :: a -&amp;gt; b from :: b -&amp;gt; a -- law: a = from . to a type Lens s t a b = forall p.</description>
    </item>
    
    <item>
      <title>Practical Recursion Schemes</title>
      <link>/software/practical-recursion-schemes/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/software/practical-recursion-schemes/</guid>
      <description>Recursive data types   Recursive data structures pop up all over in software from general-purpose structures like lists and binary trees to more application-specific structures like this AST from a simple business rules engine:
data BusinessRule input output = IfThenElse (input -&amp;gt; Bool) (BusinessRule input output) (BusinessRule input output) | Return (input -&amp;gt; output) | Stop    Functor   Foldable   The Foldable class gives you the ability to process the elements of a structure one-at-a-time, discarding the shape.</description>
    </item>
    
    <item>
      <title>Decoding lens operators</title>
      <link>/snippets/decoding-lens-operators/</link>
      <pubDate>Sat, 21 Apr 2018 14:15:59 -0500</pubDate>
      
      <guid>/snippets/decoding-lens-operators/</guid>
      <description>Notation conventions   The following table provides a quick overview of conventions used in symbolic operators in the lens library.
   Symbol Concept Denotes     ^ getter gets value from structure   ~ setter sets values in structure   % over apply transformation over selected substructure   = state threads state through   &amp;lt;&amp;lt; before change returns value before specified change   &amp;lt; after change returns value after specified change   ?</description>
    </item>
    
    <item>
      <title>Functional Operations (Functional Programming at Comcast Labs Connect)</title>
      <link>/talks/functional-operations-functional-programming-at-comcast-labs-connect/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/talks/functional-operations-functional-programming-at-comcast-labs-connect/</guid>
      <description>Functional Programming at Comcast Labs Connect / March 2018 - Philadelphia, PA
Keywords    Functional Programming
  Nix
  NixOS
  Operations
    Abstract   Maintaining configurations for different kinds of nodes and cloud resources in a [micro]service architecture can be an operational nightmare, especially if not managed with the application codebase. CI and CD job environments diverge from production configuration yielding their results unpredictable at best or produce false positives in the worst case.</description>
    </item>
    
    <item>
      <title>Economic concepts applied in software development, reliability engineering, and technical leadership</title>
      <link>/software/economic-concepts-applied-in-software-development-reliability-engineering-and-technical-leadership/</link>
      <pubDate>Thu, 22 Jun 2017 15:42:40 -0500</pubDate>
      
      <guid>/software/economic-concepts-applied-in-software-development-reliability-engineering-and-technical-leadership/</guid>
      <description>One of my favorite subjects as a layperson is economics. I have found many useful applications of methods and concepts to my work in software development, technical leadership, and reliability engineering roles.
 This is a post to share some of these.
A few ideas from economics: an overview   Below is an overview of ideas from economics that have resonated with me at work:
  Opportunity cost   Looking at what you lose by choosing a specific activity over others.</description>
    </item>
    
    <item>
      <title>A Mathematician in Scotland</title>
      <link>/jokes/a-mathematician-in-scotland/</link>
      <pubDate>Fri, 10 Mar 2017 15:45:57 -0500</pubDate>
      
      <guid>/jokes/a-mathematician-in-scotland/</guid>
      <description>A passage I came across recently amused me and I wished to share:
 A mathematician, a physicist, and an engineer are riding a train through Scotland.
 The engineer looks out the window, sees a black sheep, and exclaims, &amp;#34;Hey! They&amp;#39;ve got black sheep in Scotland!&amp;#34;
 The physicist looks out the window and corrects the engineer, &amp;#34;Strictly speaking, all we know is that there&amp;#39;s at least one black sheep in Scotland.</description>
    </item>
    
    <item>
      <title>Ruby 2.4 changes overview</title>
      <link>/snippets/ruby-2.4-changes-overview/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/snippets/ruby-2.4-changes-overview/</guid>
      <description>Unified Fixnum and Bignum into Integer It&amp;rsquo;s backward compatible too.
$ irb irb(main):001:0&amp;gt; RUBY_VERSION =&amp;gt; &amp;#34;2.3.1&amp;#34; irb(main):002:0&amp;gt; (2**100).class =&amp;gt; Bignum irb(main):003:0&amp;gt; 2.class =&amp;gt; Fixnum irb(main):004:0&amp;gt; Fixnum =&amp;gt; Fixnum irb(main):005:0&amp;gt; Bignum =&amp;gt; Bignum irb(main):006:0&amp;gt; Bogonum NameError: uninitialized constant Bogonum from (irb):6 from /home/spotter/.nix-profile/bin/irb:11:in `&amp;lt;main&amp;gt;&amp;#39; irb(main):007:0&amp;gt; quit $ nix-env -f . -iA ruby_2_4_0 replacing old â€˜ruby-2.3.1-p0â€™ installing â€˜ruby-2.4.0â€™ $ irb irb(main):001:0&amp;gt; RUBY_VERSION =&amp;gt; &amp;#34;2.4.0&amp;#34; irb(main):002:0&amp;gt; (2**100).class =&amp;gt; Integer irb(main):003:0&amp;gt; 2.class =&amp;gt; Integer irb(main):004:0&amp;gt; Fixnum (irb):4: warning: constant ::Fixnum is deprecated =&amp;gt; Integer irb(main):005:0&amp;gt; Bignum (irb):5: warning: constant ::Bignum is deprecated =&amp;gt; Integer irb(main):006:0&amp;gt; Bogonum NameError: uninitialized constant Bogonum from (irb):6 from /home/spotter/.</description>
    </item>
    
    <item>
      <title>Functional and Reactive Operations</title>
      <link>/talks/functional-and-reactive-operations/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/talks/functional-and-reactive-operations/</guid>
      <description>Reactive Summit / October 4, 2016 - Austin, TX
Keywords    Functional Programming
  Reactive Infrastructure
  Nix
  NixOS
    Abstract   When we start greenfield development of a new service or web application today we&amp;#39;d likely employ a number of practices and design choices that are known to optimise application responsiveness, resiliency, elasticity, and/or composability. Delivering our reactive applications on top of predictable infrastructure will set our project up for success.</description>
    </item>
    
    <item>
      <title>Put a Type On It: Idris Types as Propositions</title>
      <link>/talks/put-a-type-on-it-idris-types-as-propositions/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/talks/put-a-type-on-it-idris-types-as-propositions/</guid>
      <description>  Strange Loop 2016 / September 2016 - St. Louis, MO
Abstract   Slides     </description>
    </item>
    
    <item>
      <title>Nix in your home directory</title>
      <link>/snippets/nix-in-your-home-directory/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/snippets/nix-in-your-home-directory/</guid>
      <description>Prerequisites    wget is installed
  tar is installed
    Purpose   If you really don&amp;#39;t want to install Nix under /nix (or you can&amp;#39;t) then you can install Nix in your home directory like in the homedir_install.sh script included in this Gist.
 Now whenever you want to run a command under Nix&amp;#39;s control, you should prefix with nixrun.
 Good luck.</description>
    </item>
    
    <item>
      <title>To Type or not to Static Type</title>
      <link>/software/to-type-or-not-to-static-type/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/software/to-type-or-not-to-static-type/</guid>
      <description>Originally published as a Gist here: https://gist.github.com/mbbx6spp/60577af8dc4106d6e710cd804292ce20
 Minor modifications in formatting and an extra line of no-judgement was added to this text from the original Gist.
Purpose, Disclaimer and Confessions   This is the (mostly) no nonesense guide to studies and research that measures and/or compares a variety of facets, characteristics, or manifestations of software development in dynamically vs statically typed programming languages.
 Disclaimer: For larger, more complex codebases, I do advocate for statically typed languages that also support algebraic data types, generic types, type classes, and preferrably a form of typelevel expressiveness (e.</description>
    </item>
    
    <item>
      <title>From Zero To Production (NixOS, Erlang)</title>
      <link>/talks/from-zero-to-production-nixos-erlang/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/talks/from-zero-to-production-nixos-erlang/</guid>
      <description>Erlang Factory SF 2016 / March 2016 - San Francisco, CA
Abstract   This talk will introduce the audience to the Nix packaging, NixOS, and related ecosystem tools for Erlang/Elixir developers.
 By reviewing common development, testing, and deployment problems we will look at what Nix has to offer to aid Erlang/Elixir developers in these areas.
 From seamless developer environment bootstrapping to consistent CI environments and beyond.</description>
    </item>
    
    <item>
      <title>Parametricity: A Practitioners Guide</title>
      <link>/software/parametricity-a-practitioners-guide/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/software/parametricity-a-practitioners-guide/</guid>
      <description>Introduction   What software developer likes surprises, especially in production? Not me. At least not when I am on call. ;)
 Wouldn&amp;#39;t it be great if we were able to reason about our code to make our lives as simple as possible when debugging or eliminate debugging altogether?
 The big idea of parametricity is that from parametric (or generic) &amp;#34;pure&amp;#34; functions we can determine interesting properties (and more of them) from the parametric (generic) types than the equivalent function fixed with specific types.</description>
    </item>
    
    <item>
      <title>Scala WTFs</title>
      <link>/snippets/scala-wtfs/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/snippets/scala-wtfs/</guid>
      <description>Small sample of Scala WTFs circa 2014 (many taken from Paul Phillips talks on the Scala Collections library):
scala&amp;gt; List(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;).toSet // the only reasonable line of code in here res1: scala.collection.immutable.Set[String] = Set(a, b, c) scala&amp;gt; List(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;).toSet() // seen this when learning Scala first time. ROFL. res2: Boolean = false scala&amp;gt; List(1, 2) ::: List(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;) // it&amp;#39;d be funny if you didn&amp;#39;t care. res3: List[Any] = List(1, 2, a, b) scala&amp;gt; List(1, 2) ::: List(3, 4.</description>
    </item>
    
    <item>
      <title>OSX Lion (10.7.4) work laptop setup</title>
      <link>/snippets/osx-lion-10.7.4-work-laptop-setup/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/snippets/osx-lion-10.7.4-work-laptop-setup/</guid>
      <description>Homebrew   Install after the command-line tools for Xcode.
  tmux
  erlang
  haskell-platform
  zsh
  git
  figlet
  scala
  sbt
  rbenv
  ruby-build
  s3cmd
  pit
  brew install tmux erlang haskell-platform zsh \  git figlet scala sbt rbenv ruby-build s3cmd pit    RubyGems    veewee</description>
    </item>
    
    <item>
      <title>Scalaz By Example (An IO Taster)</title>
      <link>/talks/scalaz-by-example-an-io-taster/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/talks/scalaz-by-example-an-io-taster/</guid>
      <description>  PDXScala Meetup / Jan 2014 - Portland, OR
Abstract   Slides from an informal talk I gave at PDX Scala last night on an often missed part of Scalaz: IO.
  Slides     </description>
    </item>
    
    <item>
      <title>Algebraic Data Types</title>
      <link>/software/algebraic-data-types/</link>
      <pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/software/algebraic-data-types/</guid>
      <description>An algebraic data type can take many forms:
  Sum type
  Product type
  Hybrid Sum/Product type
  Recursive type (not covered in this post)
Sum Types (aka Tagged Unions)     A sum type is a type that has a known and exhaustive list of constructors where a value of that type must be constructed by exactly one of the constructors.</description>
    </item>
    
    <item>
      <title>Functional Algebra: Monoids Applied</title>
      <link>/talks/functional-algebra-monoids-applied/</link>
      <pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/talks/functional-algebra-monoids-applied/</guid>
      <description>SCNA 2012 / November 10, 2012 - Chicago, IL
Abstract   In functional programming, words from Category Theory are thrown around, but how useful are they really?
 This session looks at applications of monoids specifically and how using their algebraic properties offers a solid foundation of reasoning in many types of business domains and reduces developer error as computational context complexity increases.
 This will provide a tiny peak at Category Theory&amp;#39;s practical uses in software development and modeling.</description>
    </item>
    
    <item>
      <title>Why Haskell?</title>
      <link>/talks/why-haskell/</link>
      <pubDate>Fri, 16 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/talks/why-haskell/</guid>
      <description>Code PaLOUsa 2012 / March 16, 2012 - Louisville, KY
Abstract   Monads, also known as Kleisli triples in Category Theory, are an (endo-)functor together with two natural transformations, which are surprisingly useful in pure languages like Haskell, but this talk will NOT reference monads. Ever. (Well, at least not in this talk.)
 Instead what I intend to impress upon an audience of newcomers to Haskell is the wide array of freely available libraries most of which is liberally licensed open source software, intuitive package management, practical build tools, reasonable documentation (when you know how to read it and where to find it), interactive shell (or REPL), mature compiler, stable runtime, testing tools that will blow your mind away, and a small but collaborative and knowledgeable community of developers.</description>
    </item>
    
    <item>
      <title>Erlang OTP Glossary</title>
      <link>/snippets/erlang-otp-glossary/</link>
      <pubDate>Tue, 10 Jan 2012 00:31:13 -0500</pubDate>
      
      <guid>/snippets/erlang-otp-glossary/</guid>
      <description>I am hoping this will serve as a reference for coworkers and others new to Erlang and OTP to be able to figure out the terminology easier than I had to. I learned the hard way, so you don&amp;#39;t have to!:)
  Erlang/OTP - The set of libraries and conventions that are used as part of the core Erlang distribution by Ericsson to build fault-tolerant, distributed systems more effectively.</description>
    </item>
    
    <item>
      <title>Dynamo: Not just for datastores</title>
      <link>/talks/dynamo-not-just-for-datastores/</link>
      <pubDate>Mon, 19 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/talks/dynamo-not-just-for-datastores/</guid>
      <description>Strange Loop 2011 / September 19, 2011 - St. Louis, MO
Abstract   Find out how to build decentralized distributed systems based on a Dynamo-esque philosophy using riak_core, which is used to abstract away some of the more complicated decentralized and distributed features of Riak KV, Riak Search and other applications. Assumes some knowledge of basic Erlang and its concepts of behaviors. The audience will discover which Dynamo features can be taken advantage of via riak_core and how to build a simple example.</description>
    </item>
    
    <item>
      <title>Distributed Developer Workflows using Git</title>
      <link>/talks/distributed-developer-workflows-using-git/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/talks/distributed-developer-workflows-using-git/</guid>
      <description>C-U Developer Meetup / August 2011 - Urbana, IL
Abstract   This meetup I will be walking the audience through how to setup, configure and maintain distributed development workflows using Git (the distributed VCS developers either love or hate). Much of the workflows suggested here will be applicable to other dVCSes like Mercurial, Darcs and Bazaar.
 This will be a light, interactive taster of the chapter I am writing for &amp;#34;The Architecture of Open Source Applications, volume 2&amp;#34; that will be coming to an ebook reader or bookshelf near you in the Autumn of 2011.</description>
    </item>
    
    <item>
      <title>Erlang Meck API notes</title>
      <link>/snippets/erlang-meck-api-notes/</link>
      <pubDate>Wed, 23 Mar 2011 01:11:30 -0500</pubDate>
      
      <guid>/snippets/erlang-meck-api-notes/</guid>
      <description>Notes on using Meck API (a mocking library in Erlang) which are not well documented.
% Will create a fully mocked version of existing_module until caller crashes meck:new(ExistingModule). % Will create a fully mocked version of existing_module even after caller crashes meck:new(ExistingModule, [nolink]). % Will allow you to overload existing module, keeping old functions around meck:new(ExistingModule, [passthrough]). % Unload mocks and revert to real module implementation meck:unload(ExistingModule). % Remove functions from the mock module meck:delete(WhateverMockedModule, SomeFun, Arity).</description>
    </item>
    
    <item>
      <title>Deploying Distributed Software Services to the Cloud (without Breaking a Sweat)</title>
      <link>/talks/deploying-distributed-software-services-to-the-cloud-without-breaking-a-sweat/</link>
      <pubDate>Sat, 05 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/talks/deploying-distributed-software-services-to-the-cloud-without-breaking-a-sweat/</guid>
      <description>Code PaLOUsa 2011 / March 2011 - Louisville, KY
Abstract   The promise of cloud computing provides business benefits from reduced costs to increased flexibility. One struggle organizations face as they move to run on cloud infrastructure is automating complex dsitributed deployments.
 The presenter will discuss issues surrounding the process of automating complex cloud deployments, review tools and techniques that will aid organizations of any size deploy more complex services on distributed nodes, even across a number of cloud infrastructure providers.</description>
    </item>
    
    <item>
      <title>Custom Security Handler Nitrogen</title>
      <link>/snippets/custom-security-handler-nitrogen/</link>
      <pubDate>Wed, 16 Feb 2011 01:04:41 -0500</pubDate>
      
      <guid>/snippets/custom-security-handler-nitrogen/</guid>
      <description>An example of a custom security handler implementation for Nitrogen 2.x.
 customer_security_handler.erl
%%% HEADER %%% @author Susan Potter &amp;lt;me@susanpotter.net&amp;gt; %%% @date 2011-02-16T17:08 %%% @license BSD %%% @doc Example of a security_handler behavior implementation module. %%% It assumes a callback module is passed in that exports: %%% login_path/0 and authorized/2. %%% @end -module(custom_security_handler). -include_lib(&amp;#34;nitrogen_core/include/wf.hrl&amp;#34;). -behaviour(security_handler). % security_handler behavior exports -export([init/2, finish/2]). %%%. %%% CALLBACKS  %% @hidden %% @todo Add authentication code.</description>
    </item>
    
    <item>
      <title>Designing for Concurrency</title>
      <link>/talks/designing-for-concurrency/</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/talks/designing-for-concurrency/</guid>
      <description> C-U Software Development Group / August 2010 - Champaign, IL
 </description>
    </item>
    
    <item>
      <title>Predicate Algebra in Python</title>
      <link>/snippets/predicate-algebra-in-python/</link>
      <pubDate>Mon, 09 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/snippets/predicate-algebra-in-python/</guid>
      <description>Updated for Python3 recently:
class Predicate: &amp;#34;&amp;#34;&amp;#34; Define predicate algebra. &amp;gt;&amp;gt;&amp;gt; isEven=Predicate(lambda x: x % 2 == 0) &amp;gt;&amp;gt;&amp;gt; isOdd=Predicate(lambda x: x % 2 == 1) &amp;gt;&amp;gt;&amp;gt; isEven(6) True &amp;gt;&amp;gt;&amp;gt; isOdd(6) False &amp;gt;&amp;gt;&amp;gt; isEmpty=Predicate(lambda s: s == &amp;#34;&amp;#34;) &amp;gt;&amp;gt;&amp;gt; isNotEmpty=~isEmpty &amp;gt;&amp;gt;&amp;gt; isEmpty(&amp;#34;c&amp;#34;) False &amp;gt;&amp;gt;&amp;gt; isNotEmpty(&amp;#34;&amp;#34;) False &amp;gt;&amp;gt;&amp;gt; isNotEmpty(&amp;#34;hello&amp;#34;) True &amp;#34;&amp;#34;&amp;#34; def __init__(self, predicate): self.predicate = predicate def __or__(self, other): return Predicate(lambda x: self.predicate(x) or other(x)) def __and__(self, other): return Predicate(lambda x: self.</description>
    </item>
    
    <item>
      <title>My .gitconfig &amp; .tigrc files</title>
      <link>/snippets/my-.gitconfig-.tigrc-files/</link>
      <pubDate>Thu, 08 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>/snippets/my-.gitconfig-.tigrc-files/</guid>
      <description>[user] name = Susan Potter # make sure you change this email = me@susanpotter.net # make sure you change this [color] diff = auto status = auto branch = auto [diff] rename = copy color = auto [apply] whitespace = strip [pager] color = true [status] color = auto [branch] autosetuprebase = always [alias] co = &amp;#34;checkout&amp;#34; ci = &amp;#34;commit&amp;#34; ciall = &amp;#34;commit -a -v&amp;#34; unmerge = &amp;#34;reset --hard ORIG_HEAD&amp;#34; lsbr = &amp;#34;branch -a&amp;#34; # list all branches, even remote ones mkbr = &amp;#34;branch&amp;#34; # create branch if you specify a branch name after it, e.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 7</title>
      <link>/snippets/ruby-idioms-part-7/</link>
      <pubDate>Wed, 24 Jan 2007 18:48:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-7/</guid>
      <description>This idiom I have seen a little more in Rails than I have seen in Ruby, but I am putting it in this Ruby Idioms series anyway.
 First off, most of you will know by know that you can &amp;#34;transparently&amp;#34; provide a method in Ruby a Hash. What do I mean by &amp;#34;transparently&amp;#34;? Well have a look at the code example below:
user = User.find(:first, :include =&amp;gt; :preferences)   The last argument is actually a Hash even though you do not see the curly braces at all.</description>
    </item>
    
    <item>
      <title>SCM: The Next Generation</title>
      <link>/software/scm-the-next-generation/</link>
      <pubDate>Thu, 25 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/software/scm-the-next-generation/</guid>
      <description>I am sure most developers (whether Java, Ruby, Python, or other) have used Subversion, Perforce or CVS to manage and control their projects&amp;#39; source, but have you used darcs or git?
 I&amp;#39;m sure most of you would have heard of git it hosts the Linux kernel code currently. Less of you have probably heard of darcs before. Prior to this evening, the most notable point of darcs to me, is that it is written in Haskell.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 6</title>
      <link>/snippets/ruby-idioms-part-6/</link>
      <pubDate>Tue, 23 Jan 2007 22:28:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-6/</guid>
      <description>Tonight I remembered couple more idioms in Ruby and felt compelled to share.
 In Javafied Ruby code (below) we often see something like the following:
if something for role in user.roles return true if @@roles.include? role end end   Now when I first started writing Ruby code almost 3 years ago, I thought looping through a collection like above was the nicest way. I quickly found Ruby like the following snippet in code I inherited:</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 5</title>
      <link>/snippets/ruby-idioms-part-5/</link>
      <pubDate>Mon, 22 Jan 2007 19:43:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-5/</guid>
      <description>Some of you may say this isn&amp;#39;t strictly an idiom, but it is dependent on Ruby&amp;#39;s core API and classes, so I have included it. Ranges are a very nice low-level abstraction and can save Ruby developers a lot of time for certain coding needs. In a previous idiom example on this blog I had a list of positive odd numbers under 7. Well typing this out by hand is hardly consuming so I typed [1, 3, 5] by hand.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 4</title>
      <link>/snippets/ruby-idioms-part-4/</link>
      <pubDate>Mon, 22 Jan 2007 19:36:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-4/</guid>
      <description>To splat or not to splat, that is the question.
 In Java to unpack an array&amp;#39;s values into separate variables you would need to do something like the following:
burgers = [:hamburger, :bocaburger, :gardenburger, :turkeyburger] t = burgers[0] u = burgers[1] v = burgers[2] w = burgers[3]   In the Ruby mindset this would look more like the following:
burgers = [:hamburger, :bocaburger, :gardenburger, :turkeyburger] t, u, v = *burgers # t=&amp;gt;:hamburger, u=&amp;gt; :bocaburger, v=&amp;gt;:gardenburger t, u, v, w = *burgers # t=&amp;gt;:hamburger, u=&amp;gt;:bocaburger, v=&amp;gt;:gardenburger, w=&amp;gt;:turkeyburger t, u, v, w, x = *burgers # t=&amp;gt;:hamburger, u=&amp;gt;:bocaburger, v=&amp;gt;:gardenburger, w=&amp;gt;:turkeyburger, x=&amp;gt;nil   Think of * (or splat) as the Ruby way of unpacking the elements of an Array into separate variables in Ruby.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 3</title>
      <link>/snippets/ruby-idioms-part-3/</link>
      <pubDate>Mon, 22 Jan 2007 19:32:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-3/</guid>
      <description>Now, probably the biggest difference after the syntax, and the non-static nature of Ruby for Java heads to get used to is that Ruby is an &amp;#34;expressionist&amp;#34; language. Meaning almost all statements in Ruby evaluates to a value, i.e. everything that reasonably can be is an expression in Ruby is. This is definitely not the way Java thinks or works. So this will take some adjusting to. Don&amp;#39;t worry I will show you an example.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 2</title>
      <link>/snippets/ruby-idioms-part-2/</link>
      <pubDate>Mon, 22 Jan 2007 19:21:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-2/</guid>
      <description>Now the &amp;#34;idiom&amp;#34; we will use is not specific to Ruby, since I am pretty sure Perl has one of the constructs we will use to solve the stated problem, but it is still idiomatic, since the majority of popular OO languages (static, dynamic or otherwise) do not have it (as far as I know). Also some consider this to be a sub-optimal idiom, because there is a terser way to do something like this.</description>
    </item>
    
    <item>
      <title>Ruby Idioms, Part 1</title>
      <link>/snippets/ruby-idioms-part-1/</link>
      <pubDate>Mon, 22 Jan 2007 19:16:00 -0600</pubDate>
      
      <guid>/snippets/ruby-idioms-part-1/</guid>
      <description>With more people moving to Ruby everyday from languages like Java, I wanted to create blog entries on the most common Ruby idioms (especially ones frequently found in Rails core or Rails application code) and briefly explain how to convert your Java mindset to Ruby (over time).
 This is the first installment.
 First let us inspect what we might do in Java (converted to Ruby syntax) when determining if a value passed in equals various fixed values:</description>
    </item>
    
    <item>
      <title>Rubyisms: reopening classes</title>
      <link>/snippets/rubyisms-reopening-classes/</link>
      <pubDate>Thu, 10 Aug 2006 14:26:00 -0500</pubDate>
      
      <guid>/snippets/rubyisms-reopening-classes/</guid>
      <description>Ever wished you could write code in a very expressive way like the following examples?
  expiration_date = 3.years.from_now
  birth_date = 32.years.ago
  Now you can, in Ruby at least.
 Two years ago I was a very happy Python developer that thought no other language could compete with Python for developer productivity. My Python indoctrination occurred after 7 solid years of proclaiming Java was the ultimate language that would reign supreme.</description>
    </item>
    
    <item>
      <title>Rubyisms: naming conventions</title>
      <link>/snippets/rubyisms-naming-conventions/</link>
      <pubDate>Tue, 01 Aug 2006 12:43:00 -0500</pubDate>
      
      <guid>/snippets/rubyisms-naming-conventions/</guid>
      <description>Today I wanted to show the implicit and explicit naming conventions in Ruby for newbies. It isn&amp;#39;t particularly consistent with another language&amp;#39;s conventions, so could cause confusion when reading the Ruby Standard Library (RSL). Where appropriate I also discuss how some of the naming conventions really aid code readability and developer productivity.
ClassName and ModuleName [implicit]   Naming classes is very similar to most common conventions following in C++, Java, Python and C#.</description>
    </item>
    
    <item>
      <title>Rubyisms: forwardables</title>
      <link>/snippets/rubyisms-forwardables/</link>
      <pubDate>Sat, 22 Jul 2006 18:23:00 -0500</pubDate>
      
      <guid>/snippets/rubyisms-forwardables/</guid>
      <description>Recently some Java friends of mine have decided to taste the juicier fruits in Ruby-land with my assistance. So below are some excerpts from an email conversation I had with one about Ruby&amp;#39;s standard library forwardable features:
 Suppose we have the following model classes defined for a simple CRM system: Customer, Address, PhoneNumber, Name, etc. Now in Java-land we would have written something that looks like the following Ruby code (except you must type about a hundred more lines - although now you can write annotations to automate basic things like generate getters and setters or the like, which still requires a ridiculous amount of code to accomplish):</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I design, build, maintain, deploy, and manage distributed systems while transforming teams to be more effective through individual growth, technical leadership, re-organization, and streamlining processes.
 Feel free to ask me:
  how I might be able to help your Engineering organization live up to their highest potential;
  how I could streamline your delivery workflow and also improve quality;
  how I can grow an engineering mindset that allows engineers to take on projects of greater complexity without adding risk;</description>
    </item>
    
  </channel>
</rss>